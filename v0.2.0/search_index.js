var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference-1","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/#","page":"API/Reference","title":"API/Reference","text":"For now, here is a dump of all documented functions and types.","category":"page"},{"location":"api/#Index-1","page":"API/Reference","title":"Index","text":"","category":"section"},{"location":"api/#","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/#API/Reference-2","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/#","page":"API/Reference","title":"API/Reference","text":"Modules = [ADI]","category":"page"},{"location":"api/#ADI.GreeDS","page":"API/Reference","title":"ADI.GreeDS","text":"GreeDS(alg=PCA(); threshold=0.0, progress=true)\n\nPerforms the greedy disk subtraction (GreeDS) algorithm.\n\nThis method is an iterative approach to standard ADI reduction which seeks to minimize over-subtraction by constraining the low-rank matrix approximation from alg.\n\nFor large data cubes the iteration can cause slowdowns, so a progress bar is provided using the ProgressLogging API along with the progress keyword. It won't appear without a logging backend, such as TerminalLoggers.\n\nAlgorithms\n\nAlthough the original paper explicitly uses PCA, we allow use of any linear ADI algorithm that is characterized by ncomps. By default, uses PCA.\n\nReferences\n\nPairet et al. 2018 \"Reference-less algorithm for circumstellar disks imaging\"\nPairet et al. 2020 \"MAYONNAISE: a morphological components analysis pipeline for circumstellar disks and exoplanets imaging in the near infrared\"\n\n\n\n\n\n","category":"type"},{"location":"api/#ADI.Median","page":"API/Reference","title":"ADI.Median","text":"Median()\n\nClassic PSF subtraction using the median of entire data cube.\n\nReferences\n\nMarois et al. 2006 Angular Differential Imaging: A Powerful High-Contrast Imaging Technique\n\n\n\n\n\n","category":"type"},{"location":"api/#ADI.PCA","page":"API/Reference","title":"ADI.PCA","text":"PCA(;ncomps=nothing, pratio=1)\n\nIf ncomps is nothing, it will be set to the number of frames in the reference cube when processed.\n\nReferences\n\nSoummer, Pueyo, and Larkin (2012) \"Detection and Characterization of Exoplanets and Disks Using Projections on Karhunen-Loève Eigenimages\"\n\n\n\n\n\n","category":"type"},{"location":"api/#ADI.decompose","page":"API/Reference","title":"ADI.decompose","text":"ADI.decompose(::LinearAlgorithm, cube, angles, [cube_ref]; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"api/#ADI.reconstruct","page":"API/Reference","title":"ADI.reconstruct","text":"reconstruct(::ADIAlgorithm, cube, angles, [cube_ref]; kwargs...)\n\nReconstruct the PSF approximation for the given algorithm, using cube_ref as the reference cube if given.\n\n\n\n\n\n","category":"function"},{"location":"api/#ADI.ADIAlgorithm","page":"API/Reference","title":"ADI.ADIAlgorithm","text":"ADI.ADIAlgorithm <: Function\n\nThis abstract type is used for defining ADI algorithms. See the extended help (??ADIAlgorithm) for interface details.\n\nExtended help\n\nInterface\n\nTo extend ADIAlgorithm you may implement the following | function | default | description | |–––––|––––-|––––––-| | ADI.reconstruct | | Subroutine for creating the full reconstructed cube with the PSF | | (::ADIAlgorithm) | subtracts output of reconstruct, then derotates and collapses | Subroutine for returning the reduced residual cube |\n\n\n\n\n\n","category":"type"},{"location":"api/#ADI.ADIAlgorithm-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API/Reference","title":"ADI.ADIAlgorithm","text":"(::ADIAlgorithm)(cube, angles, [cube_ref]; kwargs...)\n\nFully process an ADI data cube using reconstruct and collapsing the residuals. Keyword arguments will be passed to HCIToolbox.collapse!.\n\n\n\n\n\n","category":"method"},{"location":"api/#ADI.LinearAlgorithm","page":"API/Reference","title":"ADI.LinearAlgorithm","text":"ADI.LinearAlgorithm <: ADI.ADIAlgorithm\n\nThis abstract type is used for defining linear ADI algorithms. See the extended help (??LinearAlgorithm) for interface details.\n\nExtended help\n\nInterface\n\nTo extend LinearAlgorithm you may implement the following\n\nfunction default description\nADI.fit  Subroutine for fitting the linear basis and coefficients as unrolled matrices\nADI.reconstruct Computes the inner product of the design matrix and weights from decompose Subroutine for creating the full reconstructed cube with the PSF\n(::LinearAlgorithm) subtracts output of reconstruct, then derotates and collapses Subroutine for returning the reduced residual cube\n\n\n\n\n\n","category":"type"},{"location":"api/#ADI.pairet_theta-Tuple{Any,Any,Any}","page":"API/Reference","title":"ADI.pairet_theta","text":"pairet_theta(frame, angles, threshold; kwargs...)\n\nTakes a frame, expands it into a cube, rotates it clockwise by angles, and min-clips at threshold. Keyword arguments will be passed to HCIToolbox.derotate!.\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = ADI","category":"page"},{"location":"#ADI.jl-1","page":"Home","title":"ADI.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: GitHub) (Image: Build Status) (Image: Coverage) (Image: License)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A package for angular differential imaging (ADI) along with its variants, such as reference differential imaging (RDI) and spectral differential imaging (SDI).","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"From Julia enter Pkg mode","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia>]\n\n(1.3) pkg> add https://github.com/juliahci/ADI.jl","category":"page"},{"location":"#License-1","page":"Home","title":"License","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This work is distributed under the MIT \"expat\" license. See LICENSE for more information.","category":"page"}]
}
